{"version":3,"sources":["TextContainer/index.tsx","GraphContainer/index.tsx","TreeContainer/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["globalDivideReg","findIndexReg","rootReg","childrenReg1","childrenReg2","childrenReg3","TextContainer","onClickGenTree","useState","inputText","setInputText","handleClickGenTree","useCallback","trees","input","paragraphs","match","treeObj","forEach","p","key","title","name","children","rootNodes","matchRes","push","fatherNode","slice","father","fatherStart","Number","fatherEnd","i","String","findChildren","nodes","map","node","newKey","transInputToTrees","console","log","handleClearUp","TextArea","value","onChange","e","target","rows","style","width","placeholder","textAlign","marginTop","onClick","marginRight","type","GraphContainer","onSelect","selectedKey","id","height","data","onNodeClick","collapsible","translate","x","y","zoom","separation","siblings","nonSiblings","TreeContainer","defaultExpandAll","selectedKeys","info","treeData","TabPane","Tabs","App","treeNodes","setTreeNodes","setSelectedKey","activeTabKey","setActiveTabKey","handleSelect","className","display","padding","flex","defaultActiveKey","activeKey","tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.653fd4e1.chunk.js","sourcesContent":["import { Button, Input } from 'antd'\nimport React, { useCallback, useState } from 'react'\n\nimport { INode } from '../App'\n\ninterface ITextContainerProps {\n  onClickGenTree: (nodes: INode[]) => void\n}\n\nconst globalDivideReg = /(\\d+)[\\s\\S]*?。/g\nconst findIndexReg = /(\\d+)[\\s\\S]*?。/\nconst rootReg = /(\\d+)\\.一种[\\s\\S]*?。/\nconst childrenReg1 = /(\\d+)\\.(根据|如)权利要求(\\d+)所述[\\s\\S]*?。/\nconst childrenReg2 = /(\\d+)\\.(根据|如)权利要求(\\d+)或(\\d+)[\\s\\S]*?。/\nconst childrenReg3 = /(\\d+)\\.(根据|如)权利要求(\\d+)(-|至)(\\d+)[\\s\\S]*?。/\n\nconst transInputToTrees = (input: string): INode[] => {\n  // divide to paragraphs\n  const paragraphs = input.match(globalDivideReg)\n  \n  // construct node\n  const treeObj = {}\n  paragraphs && paragraphs.forEach(p => {\n    let matchRes = p.match(findIndexReg)\n    const key = matchRes[1]\n    treeObj[key] = {\n      title: p,\n      name: key,\n      children: []\n    }\n  })\n\n  // construct dependencies\n  const rootNodes = []\n  paragraphs && paragraphs.forEach(p => {\n    let matchRes = []\n    if (matchRes = p.match(rootReg)) {\n      const key = matchRes[1]\n      rootNodes.push(key)\n    } else if (matchRes = p.match(childrenReg1)) {\n      const key = matchRes[1]\n      const fatherNode = matchRes[3]\n      treeObj[fatherNode].children.push(key)\n    } else if (matchRes = p.match(childrenReg2)) { // (\\d+)或(\\d+)\n      const key = matchRes[1]\n      const fatherNodeList = matchRes.slice(3)\n      fatherNodeList.forEach((father => {\n        treeObj[father].children.push(key)\n      }))\n    } else if (matchRes = p.match(childrenReg3)) { // (\\d+)(-|到)(\\d+)\n      const key = matchRes[1]\n      const fatherStart = Number(matchRes[3])\n      const fatherEnd = Number(matchRes[5])\n      for (let i = fatherStart; i <= fatherEnd; i++) {\n        treeObj[String(i)].children.push(key)\n      }\n    } \n  })\n\n  // connect node and dependency\n  const findChildren = (nodes: string[], key: string): INode[] => {\n    return nodes.map(node => {\n      const newKey = key + '-' + node\n      return {\n        key: newKey,\n        name: node,\n        title: treeObj[node]?.title,\n        children: findChildren(treeObj[node]?.children || [], newKey)\n      }\n    })\n  }\n\n  return findChildren(rootNodes, '0')\n}\n\n\nconst TextContainer: React.FC<ITextContainerProps> = ({onClickGenTree}) => {\n\n  \n  const [inputText, setInputText] = useState('')\n\n  const handleClickGenTree = useCallback(\n    () => {\n      const trees = transInputToTrees(inputText)\n      console.log(trees);\n      \n      onClickGenTree(trees)\n    },\n    [inputText, onClickGenTree],\n  )\n\n  const handleClearUp = useCallback(\n    () => {\n      setInputText('');\n    },\n    [],\n  )\n  \n  return (\n    <div>\n      <Input.TextArea\n        value={inputText}\n        onChange={e => {\n          setInputText(e.target.value)\n        }}\n        rows={30} \n        style={{width: '100%'}}\n        placeholder='请输入文本...'\n      />\n\n      <div style={{textAlign: 'right', marginTop: 20}}>\n        <Button onClick={handleClearUp} style={{marginRight: 20}}>清空</Button>\n        <Button type='primary' onClick={handleClickGenTree}>生成树</Button>\n      </div>\n    </div>\n  )\n}\nexport default TextContainer","import React from 'react'\nimport Tree from 'react-d3-tree';\nimport { INode } from '../App';\n\ninterface IGraphContainerProps {\n  nodes: INode[],\n  selectedKey: string,\n  onSelect: (key: string) => void\n}\n\nconst GraphContainer: React.FC<IGraphContainerProps> = ({ nodes, selectedKey, onSelect }) => {\n\n  const handleNodeClick = (node: any) => {\n    const key = node.key\n    onSelect(key)\n  }\n  return (\n    <div id=\"treeWrapper\" style={{ width: '100%', height: '100%' }}>\n      <Tree\n        data={{\n          name: '起点',\n          children: nodes\n        }}\n        onNodeClick={handleNodeClick}\n        collapsible={false}\n        translate={{\n          x: 100,\n          y: 400\n        }}\n        zoom={0.8}\n        separation={{\n          siblings: 1,\n          nonSiblings: 1\n        }}\n      />\n    </div>\n  )\n}\nexport default GraphContainer","import { Tree } from 'antd';\nimport React from 'react'\nimport { INode } from '../App';\ninterface ITreeContainerProps {\n  nodes: INode[],\n  selectedKey: string,\n  onSelect: (key: string) => void\n}\n\nconst TreeContainer: React.FC<ITreeContainerProps> = ({ nodes, selectedKey, onSelect }) => {\n\n  const handleSelect = (selectedKeys: React.Key[], info: any) => {\n    onSelect(selectedKeys[0] as string)\n  };\n  \n  return (\n    <Tree\n      defaultExpandAll\n      selectedKeys={[selectedKey]}\n      onSelect={handleSelect}\n      treeData={nodes}\n    />\n  );\n}\nexport default TreeContainer","import React, { useCallback, useState } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport TextContainer from './TextContainer';\nimport GraphContainer from './GraphContainer';\nimport { Tabs } from 'antd';\nimport TreeContainer from './TreeContainer';\nconst { TabPane } = Tabs;\n\nexport interface INode {\n  key: string\n  name: string\n  title: string\n  children: INode[]\n}\n\nfunction App() {\n\n  const [treeNodes, setTreeNodes] = useState<INode[]>([])\n  const [selectedKey, setSelectedKey] = useState('')\n  const [activeTabKey, setActiveTabKey] = useState('textInput')\n\n  function handleChangeTab(key: string) {\n    setActiveTabKey(key)\n  }\n\n  const handleClickGenTree = useCallback(\n    (nodes: INode[]) => {\n      setTreeNodes(nodes)\n      setActiveTabKey('tree')\n    },\n    [],\n  )\n\n  const handleSelect = useCallback(\n    (key: string) => {\n      console.log('selectKey', key);\n      setSelectedKey(key)\n    },\n    [],\n  )\n  \n  return (\n    <div className=\"App\" style={{display: 'flex', padding: '20px 40px'}}>\n\n      <div className='leftPart' style={{flex: 1}}>\n      <Tabs defaultActiveKey=\"1\" onChange={handleChangeTab} activeKey={activeTabKey}>\n        <TabPane tab=\"文本输入\" key=\"textInput\">\n          <TextContainer onClickGenTree={handleClickGenTree}/>\n        </TabPane>\n        <TabPane tab=\"文本树\" key=\"tree\">\n          <TreeContainer nodes={treeNodes} selectedKey={selectedKey} onSelect={handleSelect}/>\n        </TabPane>\n      </Tabs>\n        \n\n      </div>\n\n      <div className='rightPart' style={{flex: 2}}>\n        <GraphContainer nodes={treeNodes} selectedKey={selectedKey} onSelect={handleSelect}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}